#include <cassert>

#include "../../src/util/tuples.hpp"

using namespace tkoz;

void test_tuple2()
{
    static_assert(std::is_same_v<tuple2<int>,tuple2<int,int>>);
    typedef tuple2<int> ti;
    ti t1;
    t1 = {1,2};
    assert(t1.a == 1 && t1.b == 2);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b);
    t1.set<0>(101);
    t1.set<1>(102);
    assert(t1 == (ti{101,102}));
    assert(t1.a == 101 && t1.b == 102);
    assert(!bool(ti{0,0}) && !(ti{0,0}));
    assert(bool(ti{1,0}) && !!(ti{1,0}));
    assert(bool(ti{0,1}) && !!(ti{0,1}));
    assert(bool(ti{1,1}) && !!(ti{1,1}));
    assert(t1-- == (ti{101,102}));
    assert(t1 == (ti{100,101}));
    assert(t1++ == (ti{100,101}));
    assert(t1 == (ti{101,102}));
    assert(--t1 == (ti{100,101}));
    assert(t1 == (ti{100,101}));
    assert(++t1 == (ti{101,102}));
    assert(t1 == (ti{101,102}));
    assert(-t1 == (ti{-101,-102}));
    assert(+t1 == (ti{101,102}));
    assert(~t1 == (ti{~101,~102}));
    assert((ti{1,2}) + (ti{101,102}) == (ti{102,104}));
    assert((ti{102,104}) - (ti{1,2}) == (ti{101,102}));
    assert((ti{1,2}) * (ti{3,4}) == (ti{3,8}));
    assert((ti{1,4}) / (ti{1,2}) == (ti{1,2}));
}

void test_tuple3()
{
    static_assert(std::is_same_v<tuple3<int>,tuple3<int,int,int>>);
    typedef tuple3<int> ti;
    ti t1;
    t1 = {1,2,3};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    assert(t1 == (ti{101,102,103}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103);
    assert(!bool(ti{0,0,0}) && !(ti{0,0,0}));
    assert(bool(ti{1,0,0}) && !!(ti{1,0,0}));
    assert(bool(ti{0,0,1}) && !!(ti{0,0,1}));
    assert(bool(ti{1,1,1}) && !!(ti{1,1,1}));
    assert(t1-- == (ti{101,102,103}));
    assert(t1 == (ti{100,101,102}));
    assert(t1++ == (ti{100,101,102}));
    assert(t1 == (ti{101,102,103}));
    assert(--t1 == (ti{100,101,102}));
    assert(t1 == (ti{100,101,102}));
    assert(++t1 == (ti{101,102,103}));
    assert(t1 == (ti{101,102,103}));
    assert(-t1 == (ti{-101,-102,-103}));
    assert(+t1 == (ti{101,102,103}));
    assert(~t1 == (ti{~101,~102,~103}));
    assert((ti{1,2,3}) + (ti{101,102,103}) == (ti{102,104,106}));
    assert((ti{102,104,106}) - (ti{1,2,3}) == (ti{101,102,103}));
    assert((ti{1,2,3}) * (ti{4,5,6}) == (ti{4,10,18}));
    assert((ti{1,4,9}) / (ti{1,2,3}) == (ti{1,2,3}));
}

void test_tuple4()
{
    static_assert(std::is_same_v<tuple4<int>,tuple4<int,int,int,int>>);
    typedef tuple4<int> ti;
    ti t1;
    t1 = {1,2,3,4};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    assert(t1 == (ti{101,102,103,104}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104);
    assert(!bool(ti{0,0,0,0}) && !(ti{0,0,0,0}));
    assert(bool(ti{1,0,0,0}) && !!(ti{1,0,0,0}));
    assert(bool(ti{0,0,0,1}) && !!(ti{0,0,0,1}));
    assert(bool(ti{1,1,1,1}) && !!(ti{1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104}));
    assert(t1 == (ti{100,101,102,103}));
    assert(t1++ == (ti{100,101,102,103}));
    assert(t1 == (ti{101,102,103,104}));
    assert(--t1 == (ti{100,101,102,103}));
    assert(t1 == (ti{100,101,102,103}));
    assert(++t1 == (ti{101,102,103,104}));
    assert(t1 == (ti{101,102,103,104}));
    assert(-t1 == (ti{-101,-102,-103,-104}));
    assert(+t1 == (ti{101,102,103,104}));
    assert(~t1 == (ti{~101,~102,~103,~104}));
    assert((ti{1,2,3,4}) + (ti{101,102,103,104}) == (ti{102,104,106,108}));
    assert((ti{102,104,106,108}) - (ti{1,2,3,4}) == (ti{101,102,103,104}));
    assert((ti{1,2,3,4}) * (ti{5,6,7,8}) == (ti{5,12,21,32}));
    assert((ti{1,4,9,16}) / (ti{1,2,3,4}) == (ti{1,2,3,4}));
}

void test_tuple5()
{
    static_assert(std::is_same_v<tuple5<int>,tuple5<int,int,int,int,int>>);
    typedef tuple5<int> ti;
    ti t1;
    t1 = {1,2,3,4,5};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    assert(t1 == (ti{101,102,103,104,105}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105);
    assert(!bool(ti{0,0,0,0,0}) && !(ti{0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0}) && !!(ti{1,0,0,0,0}));
    assert(bool(ti{0,0,0,0,1}) && !!(ti{0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1}) && !!(ti{1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105}));
    assert(t1 == (ti{100,101,102,103,104}));
    assert(t1++ == (ti{100,101,102,103,104}));
    assert(t1 == (ti{101,102,103,104,105}));
    assert(--t1 == (ti{100,101,102,103,104}));
    assert(t1 == (ti{100,101,102,103,104}));
    assert(++t1 == (ti{101,102,103,104,105}));
    assert(t1 == (ti{101,102,103,104,105}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105}));
    assert(+t1 == (ti{101,102,103,104,105}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105}));
    assert((ti{1,2,3,4,5}) + (ti{101,102,103,104,105}) == (ti{102,104,106,108,110}));
    assert((ti{102,104,106,108,110}) - (ti{1,2,3,4,5}) == (ti{101,102,103,104,105}));
    assert((ti{1,2,3,4,5}) * (ti{6,7,8,9,10}) == (ti{6,14,24,36,50}));
    assert((ti{1,4,9,16,25}) / (ti{1,2,3,4,5}) == (ti{1,2,3,4,5}));
}

void test_tuple6()
{
    static_assert(std::is_same_v<tuple6<int>,tuple6<int,int,int,int,int,int>>);
    typedef tuple6<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    assert(t1 == (ti{101,102,103,104,105,106}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106);
    assert(!bool(ti{0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106}));
    assert(t1 == (ti{100,101,102,103,104,105}));
    assert(t1++ == (ti{100,101,102,103,104,105}));
    assert(t1 == (ti{101,102,103,104,105,106}));
    assert(--t1 == (ti{100,101,102,103,104,105}));
    assert(t1 == (ti{100,101,102,103,104,105}));
    assert(++t1 == (ti{101,102,103,104,105,106}));
    assert(t1 == (ti{101,102,103,104,105,106}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106}));
    assert(+t1 == (ti{101,102,103,104,105,106}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106}));
    assert((ti{1,2,3,4,5,6}) + (ti{101,102,103,104,105,106}) == (ti{102,104,106,108,110,112}));
    assert((ti{102,104,106,108,110,112}) - (ti{1,2,3,4,5,6}) == (ti{101,102,103,104,105,106}));
    assert((ti{1,2,3,4,5,6}) * (ti{7,8,9,10,11,12}) == (ti{7,16,27,40,55,72}));
    assert((ti{1,4,9,16,25,36}) / (ti{1,2,3,4,5,6}) == (ti{1,2,3,4,5,6}));
}

void test_tuple7()
{
    static_assert(std::is_same_v<tuple7<int>,tuple7<int,int,int,int,int,int,int>>);
    typedef tuple7<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    assert(t1 == (ti{101,102,103,104,105,106,107}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107);
    assert(!bool(ti{0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107}));
    assert(t1 == (ti{100,101,102,103,104,105,106}));
    assert(t1++ == (ti{100,101,102,103,104,105,106}));
    assert(t1 == (ti{101,102,103,104,105,106,107}));
    assert(--t1 == (ti{100,101,102,103,104,105,106}));
    assert(t1 == (ti{100,101,102,103,104,105,106}));
    assert(++t1 == (ti{101,102,103,104,105,106,107}));
    assert(t1 == (ti{101,102,103,104,105,106,107}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107}));
    assert(+t1 == (ti{101,102,103,104,105,106,107}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107}));
    assert((ti{1,2,3,4,5,6,7}) + (ti{101,102,103,104,105,106,107}) == (ti{102,104,106,108,110,112,114}));
    assert((ti{102,104,106,108,110,112,114}) - (ti{1,2,3,4,5,6,7}) == (ti{101,102,103,104,105,106,107}));
    assert((ti{1,2,3,4,5,6,7}) * (ti{8,9,10,11,12,13,14}) == (ti{8,18,30,44,60,78,98}));
    assert((ti{1,4,9,16,25,36,49}) / (ti{1,2,3,4,5,6,7}) == (ti{1,2,3,4,5,6,7}));
}

void test_tuple8()
{
    static_assert(std::is_same_v<tuple8<int>,tuple8<int,int,int,int,int,int,int,int>>);
    typedef tuple8<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    assert(t1 == (ti{101,102,103,104,105,106,107,108}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108);
    assert(!bool(ti{0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108}));
    assert((ti{1,2,3,4,5,6,7,8}) + (ti{101,102,103,104,105,106,107,108}) == (ti{102,104,106,108,110,112,114,116}));
    assert((ti{102,104,106,108,110,112,114,116}) - (ti{1,2,3,4,5,6,7,8}) == (ti{101,102,103,104,105,106,107,108}));
    assert((ti{1,2,3,4,5,6,7,8}) * (ti{9,10,11,12,13,14,15,16}) == (ti{9,20,33,48,65,84,105,128}));
    assert((ti{1,4,9,16,25,36,49,64}) / (ti{1,2,3,4,5,6,7,8}) == (ti{1,2,3,4,5,6,7,8}));
}

void test_tuple9()
{
    static_assert(std::is_same_v<tuple9<int>,tuple9<int,int,int,int,int,int,int,int,int>>);
    typedef tuple9<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109}));
    assert((ti{1,2,3,4,5,6,7,8,9}) + (ti{101,102,103,104,105,106,107,108,109}) == (ti{102,104,106,108,110,112,114,116,118}));
    assert((ti{102,104,106,108,110,112,114,116,118}) - (ti{1,2,3,4,5,6,7,8,9}) == (ti{101,102,103,104,105,106,107,108,109}));
    assert((ti{1,2,3,4,5,6,7,8,9}) * (ti{10,11,12,13,14,15,16,17,18}) == (ti{10,22,36,52,70,90,112,136,162}));
    assert((ti{1,4,9,16,25,36,49,64,81}) / (ti{1,2,3,4,5,6,7,8,9}) == (ti{1,2,3,4,5,6,7,8,9}));
}

void test_tuple10()
{
    static_assert(std::is_same_v<tuple10<int>,tuple10<int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple10<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110}));
    assert((ti{1,2,3,4,5,6,7,8,9,10}) + (ti{101,102,103,104,105,106,107,108,109,110}) == (ti{102,104,106,108,110,112,114,116,118,120}));
    assert((ti{102,104,106,108,110,112,114,116,118,120}) - (ti{1,2,3,4,5,6,7,8,9,10}) == (ti{101,102,103,104,105,106,107,108,109,110}));
    assert((ti{1,2,3,4,5,6,7,8,9,10}) * (ti{11,12,13,14,15,16,17,18,19,20}) == (ti{11,24,39,56,75,96,119,144,171,200}));
    assert((ti{1,4,9,16,25,36,49,64,81,100}) / (ti{1,2,3,4,5,6,7,8,9,10}) == (ti{1,2,3,4,5,6,7,8,9,10}));
}

void test_tuple11()
{
    static_assert(std::is_same_v<tuple11<int>,tuple11<int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple11<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11}) + (ti{101,102,103,104,105,106,107,108,109,110,111}) == (ti{102,104,106,108,110,112,114,116,118,120,122}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122}) - (ti{1,2,3,4,5,6,7,8,9,10,11}) == (ti{101,102,103,104,105,106,107,108,109,110,111}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11}) * (ti{12,13,14,15,16,17,18,19,20,21,22}) == (ti{12,26,42,60,80,102,126,152,180,210,242}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121}) / (ti{1,2,3,4,5,6,7,8,9,10,11}) == (ti{1,2,3,4,5,6,7,8,9,10,11}));
}

void test_tuple12()
{
    static_assert(std::is_same_v<tuple12<int>,tuple12<int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple12<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12}) * (ti{13,14,15,16,17,18,19,20,21,22,23,24}) == (ti{13,28,45,64,85,108,133,160,189,220,253,288}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12}));
}

void test_tuple13()
{
    static_assert(std::is_same_v<tuple13<int>,tuple13<int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple13<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13}) * (ti{14,15,16,17,18,19,20,21,22,23,24,25,26}) == (ti{14,30,48,68,90,114,140,168,198,230,264,300,338}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13}));
}

void test_tuple14()
{
    static_assert(std::is_same_v<tuple14<int>,tuple14<int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple14<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14}) * (ti{15,16,17,18,19,20,21,22,23,24,25,26,27,28}) == (ti{15,32,51,72,95,120,147,176,207,240,275,312,351,392}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14}));
}

void test_tuple15()
{
    static_assert(std::is_same_v<tuple15<int>,tuple15<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple15<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}) * (ti{16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}) == (ti{16,34,54,76,100,126,154,184,216,250,286,324,364,406,450}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}));
}

void test_tuple16()
{
    static_assert(std::is_same_v<tuple16<int>,tuple16<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple16<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}) * (ti{17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}) == (ti{17,36,57,80,105,132,161,192,225,260,297,336,377,420,465,512}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}));
}

void test_tuple17()
{
    static_assert(std::is_same_v<tuple17<int>,tuple17<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple17<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}) * (ti{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34}) == (ti{18,38,60,84,110,138,168,200,234,270,308,348,390,434,480,528,578}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}));
}

void test_tuple18()
{
    static_assert(std::is_same_v<tuple18<int>,tuple18<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple18<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}) * (ti{19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36}) == (ti{19,40,63,88,115,144,175,208,243,280,319,360,403,448,495,544,595,648}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}));
}

void test_tuple19()
{
    static_assert(std::is_same_v<tuple19<int>,tuple19<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple19<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}) * (ti{20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38}) == (ti{20,42,66,92,120,150,182,216,252,290,330,372,416,462,510,560,612,666,722}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}));
}

void test_tuple20()
{
    static_assert(std::is_same_v<tuple20<int>,tuple20<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple20<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}) * (ti{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40}) == (ti{21,44,69,96,125,156,189,224,261,300,341,384,429,476,525,576,629,684,741,800}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}));
}

void test_tuple21()
{
    static_assert(std::is_same_v<tuple21<int>,tuple21<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple21<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}) * (ti{22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42}) == (ti{22,46,72,100,130,162,196,232,270,310,352,396,442,490,540,592,646,702,760,820,882}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}));
}

void test_tuple22()
{
    static_assert(std::is_same_v<tuple22<int>,tuple22<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple22<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21 && t1.v == 22);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u && &t1.get<21>() == &t1.v);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    t1.set<21>(122);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121 && t1.v == 122);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121,~122}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}) * (ti{23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44}) == (ti{23,48,75,104,135,168,203,240,279,320,363,408,455,504,555,608,663,720,779,840,903,968}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}));
}

void test_tuple23()
{
    static_assert(std::is_same_v<tuple23<int>,tuple23<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple23<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21 && t1.v == 22 && t1.w == 23);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u && &t1.get<21>() == &t1.v && &t1.get<22>() == &t1.w);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    t1.set<21>(122);
    t1.set<22>(123);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121 && t1.v == 122 && t1.w == 123);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121,~122,~123}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}) * (ti{24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46}) == (ti{24,50,78,108,140,174,210,248,288,330,374,420,468,518,570,624,680,738,798,860,924,990,1058}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}));
}

void test_tuple24()
{
    static_assert(std::is_same_v<tuple24<int>,tuple24<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple24<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21 && t1.v == 22 && t1.w == 23 && t1.x == 24);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u && &t1.get<21>() == &t1.v && &t1.get<22>() == &t1.w && &t1.get<23>() == &t1.x);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    t1.set<21>(122);
    t1.set<22>(123);
    t1.set<23>(124);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121 && t1.v == 122 && t1.w == 123 && t1.x == 124);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121,~122,~123,~124}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}) * (ti{25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48}) == (ti{25,52,81,112,145,180,217,256,297,340,385,432,481,532,585,640,697,756,817,880,945,1012,1081,1152}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}));
}

void test_tuple25()
{
    static_assert(std::is_same_v<tuple25<int>,tuple25<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple25<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21 && t1.v == 22 && t1.w == 23 && t1.x == 24 && t1.y == 25);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u && &t1.get<21>() == &t1.v && &t1.get<22>() == &t1.w && &t1.get<23>() == &t1.x && &t1.get<24>() == &t1.y);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    t1.set<21>(122);
    t1.set<22>(123);
    t1.set<23>(124);
    t1.set<24>(125);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121 && t1.v == 122 && t1.w == 123 && t1.x == 124 && t1.y == 125);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121,~122,~123,~124,~125}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}) * (ti{26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50}) == (ti{26,54,84,116,150,186,224,264,306,350,396,444,494,546,600,656,714,774,836,900,966,1034,1104,1176,1250}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}));
}

void test_tuple26()
{
    static_assert(std::is_same_v<tuple26<int>,tuple26<int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>>);
    typedef tuple26<int> ti;
    ti t1;
    t1 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26};
    assert(t1.a == 1 && t1.b == 2 && t1.c == 3 && t1.d == 4 && t1.e == 5 && t1.f == 6 && t1.g == 7 && t1.h == 8 && t1.i == 9 && t1.j == 10 && t1.k == 11 && t1.l == 12 && t1.m == 13 && t1.n == 14 && t1.o == 15 && t1.p == 16 && t1.q == 17 && t1.r == 18 && t1.s == 19 && t1.t == 20 && t1.u == 21 && t1.v == 22 && t1.w == 23 && t1.x == 24 && t1.y == 25 && t1.z == 26);
    assert(&t1.get<0>() == &t1.a && &t1.get<1>() == &t1.b && &t1.get<2>() == &t1.c && &t1.get<3>() == &t1.d && &t1.get<4>() == &t1.e && &t1.get<5>() == &t1.f && &t1.get<6>() == &t1.g && &t1.get<7>() == &t1.h && &t1.get<8>() == &t1.i && &t1.get<9>() == &t1.j && &t1.get<10>() == &t1.k && &t1.get<11>() == &t1.l && &t1.get<12>() == &t1.m && &t1.get<13>() == &t1.n && &t1.get<14>() == &t1.o && &t1.get<15>() == &t1.p && &t1.get<16>() == &t1.q && &t1.get<17>() == &t1.r && &t1.get<18>() == &t1.s && &t1.get<19>() == &t1.t && &t1.get<20>() == &t1.u && &t1.get<21>() == &t1.v && &t1.get<22>() == &t1.w && &t1.get<23>() == &t1.x && &t1.get<24>() == &t1.y && &t1.get<25>() == &t1.z);
    t1.set<0>(101);
    t1.set<1>(102);
    t1.set<2>(103);
    t1.set<3>(104);
    t1.set<4>(105);
    t1.set<5>(106);
    t1.set<6>(107);
    t1.set<7>(108);
    t1.set<8>(109);
    t1.set<9>(110);
    t1.set<10>(111);
    t1.set<11>(112);
    t1.set<12>(113);
    t1.set<13>(114);
    t1.set<14>(115);
    t1.set<15>(116);
    t1.set<16>(117);
    t1.set<17>(118);
    t1.set<18>(119);
    t1.set<19>(120);
    t1.set<20>(121);
    t1.set<21>(122);
    t1.set<22>(123);
    t1.set<23>(124);
    t1.set<24>(125);
    t1.set<25>(126);
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(t1.a == 101 && t1.b == 102 && t1.c == 103 && t1.d == 104 && t1.e == 105 && t1.f == 106 && t1.g == 107 && t1.h == 108 && t1.i == 109 && t1.j == 110 && t1.k == 111 && t1.l == 112 && t1.m == 113 && t1.n == 114 && t1.o == 115 && t1.p == 116 && t1.q == 117 && t1.r == 118 && t1.s == 119 && t1.t == 120 && t1.u == 121 && t1.v == 122 && t1.w == 123 && t1.x == 124 && t1.y == 125 && t1.z == 126);
    assert(!bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) && !!(ti{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
    assert(bool(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}) && !!(ti{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}));
    assert(bool(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}) && !!(ti{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
    assert(t1-- == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1++ == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(--t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(t1 == (ti{100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125}));
    assert(++t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(-t1 == (ti{-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126}));
    assert(+t1 == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert(~t1 == (ti{~101,~102,~103,~104,~105,~106,~107,~108,~109,~110,~111,~112,~113,~114,~115,~116,~117,~118,~119,~120,~121,~122,~123,~124,~125,~126}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}) + (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}) == (ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152}));
    assert((ti{102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152}) - (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}) == (ti{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126}));
    assert((ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}) * (ti{27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52}) == (ti{27,56,87,120,155,192,231,272,315,360,407,456,507,560,615,672,731,792,855,920,987,1056,1127,1200,1275,1352}));
    assert((ti{1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676}) / (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}) == (ti{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}));
}

int main()
{
    test_tuple2();
    test_tuple3();
    test_tuple4();
    test_tuple5();
    test_tuple6();
    test_tuple7();
    test_tuple8();
    test_tuple9();
    test_tuple10();
    test_tuple11();
    test_tuple12();
    test_tuple13();
    test_tuple14();
    test_tuple15();
    test_tuple16();
    test_tuple17();
    test_tuple18();
    test_tuple19();
    test_tuple20();
    test_tuple21();
    test_tuple22();
    test_tuple23();
    test_tuple24();
    test_tuple25();
    test_tuple26();
    return 0;
}
